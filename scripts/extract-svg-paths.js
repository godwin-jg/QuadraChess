#!/usr/bin/env node

/**
 * SVG Path Extractor
 * This script helps extract SVG path data from your SVG files
 * and formats them for use in the React Native app
 */

const fs = require("fs");
const path = require("path");

const CHESS_PIECES_DIR = path.join(__dirname, "../assets/chess-pieces");
const OUTPUT_FILE = path.join(
  __dirname,
  "../app/components/board/PieceAssets.ts"
);

// SVG files to process
const PIECES = ["king", "queen", "rook", "bishop", "knight", "pawn"];
const FOLDERS = ["dark", "light"];

function extractPathFromSVG(svgContent) {
  const paths = [];

  // Extract all path elements
  const pathMatches = svgContent.match(/<path[^>]*d="([^"]*)"[^>]*>/g);
  if (pathMatches) {
    pathMatches.forEach((match) => {
      const pathMatch = match.match(/d="([^"]*)"/);
      if (pathMatch && pathMatch[1]) {
        paths.push(pathMatch[1]);
      }
    });
  }

  // Extract circle elements and convert to paths
  const circleMatches = svgContent.match(/<circle[^>]*>/g);
  if (circleMatches) {
    circleMatches.forEach((match) => {
      const cxMatch = match.match(/cx="([^"]*)"/);
      const cyMatch = match.match(/cy="([^"]*)"/);
      const rMatch = match.match(/r="([^"]*)"/);

      if (cxMatch && cyMatch && rMatch) {
        const cx = parseFloat(cxMatch[1]);
        const cy = parseFloat(cyMatch[1]);
        const r = parseFloat(rMatch[1]);

        // Convert circle to path
        const circlePath = `M ${cx - r},${cy} A ${r},${r} 0 1,1 ${
          cx + r
        },${cy} A ${r},${r} 0 1,1 ${cx - r},${cy}`;
        paths.push(circlePath);
      }
    });
  }

  // Combine all paths
  if (paths.length > 0) {
    return paths.join(" ");
  }

  return "";
}

function processSVGFiles() {
  const pieceAssets = {};

  FOLDERS.forEach((folder) => {
    PIECES.forEach((piece) => {
      const svgPath = path.join(CHESS_PIECES_DIR, folder, `${piece}.svg`);

      if (fs.existsSync(svgPath)) {
        const svgContent = fs.readFileSync(svgPath, "utf8");
        const pathData = extractPathFromSVG(svgContent);

        const key = `${folder}-${piece}`;
        pieceAssets[key] = {
          type: piece,
          folder: folder,
          path: pathData,
        };

        console.log(`✅ Processed ${folder}/${piece}.svg`);
      } else {
        console.log(`❌ Missing ${folder}/${piece}.svg`);
      }
    });
  });

  return pieceAssets;
}

function generateTypeScriptFile(pieceAssets) {
  const tsContent = `// Auto-generated from SVG files
// Do not edit this file manually - run extract-svg-paths.js instead

export interface PieceAsset {
  type: 'king' | 'queen' | 'rook' | 'bishop' | 'knight' | 'pawn';
  folder: 'dark' | 'light';
  path: string;
}

export const pieceAssets: { [key: string]: PieceAsset } = ${JSON.stringify(
    pieceAssets,
    null,
    2
  )};

export const getPieceAsset = (piece: string): PieceAsset | null => {
  const pieceType = piece[1];
  const pieceColor = piece[0];
  
  const typeMap: { [key: string]: string } = {
    'K': 'king',
    'Q': 'queen',
    'R': 'rook',
    'B': 'bishop',
    'N': 'knight',
    'P': 'pawn',
  };
  
  const type = typeMap[pieceType];
  if (!type) return null;
  
  const folder = ['r', 'b'].includes(pieceColor) ? 'dark' : 'light';
  const key = \`\${folder}-\${type}\`;
  return pieceAssets[key] || null;
};

export const getPieceColor = (piece: string): string => {
  switch (piece[0]) {
    case "y":
      return "#EAB308"; // Yellow
    case "r":
      return "#DC2626"; // Red
    case "b":
      return "#2563EB"; // Blue
    case "g":
      return "#16A34A"; // Green
    default:
      return "#000";
  }
};
`;

  fs.writeFileSync(OUTPUT_FILE, tsContent);
  console.log(`✅ Generated ${OUTPUT_FILE}`);
}

// Main execution
const pieceAssets = processSVGFiles();
generateTypeScriptFile(pieceAssets);
console.log("✨ Done!");
